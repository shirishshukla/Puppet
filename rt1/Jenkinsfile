#!/usr/bin/groovy

def agentName = "SPRx2.0_DEPLOY-ONLY"
def DeplPropFile = "INPUT_SERVICES.properties"
def SerialServicesListFile = "SERIAL_SERVICES_LIST.txt"
def SerialServicesPropFile = "SERIAL_SERVICES.properties"
def ParallelServicesPropFile = "PARALLEL_SERVICES.properties"
def NAServicesPropFile = "NA_SERVICES.properties"

// Run Build
def runJob(def artifactID, def artifactVersion, def version) {
  dir(env.WORKSPACE + "/" + artifactVersion) {
      def buildRun = ""
      def result = ""
      if (PROCEED or deployType == 'parallel') {
          // println("Agent is: "+ agent)
          node(agent){
              buildRun = build job: DEPLOYMENT_JOB, parameters: [
              string(name: 'ARTIFACT_ID',value: artifactID),
              string(name: 'ARTIFACT_VERSION',value: artifactVersion),
              string(name: 'VERSION',value: version)
              ], propagate: false
          }
          def buildResult = buildRun.getResult()
          result =  artifactID + ', ' +  version + ', ' + buildRun.absoluteUrl + 'console' + ', ' + '<font color=green>' + buildRun.result + '</font>'
          // println(result)
          if (buildResult != 'SUCCESS') {
              // println("Service ${artifactID} failed with result: ${buildResult}")
              result =  artifactID + ', ' +  version + ', ' + buildRun.absoluteUrl + 'console' + ', ' + '<font color=red>' + buildRun.result + '</font>'
              PROCEED = false
          }
      } else {
          result = artifactID + ', ' +  version + ', ' + 'NA' + ', ' + '<font color=orange>SKIPPED</font>'
         // println(result)
      }

      // Failed Entries
      if (!PROCEED){
          sh "echo $SERVICE >> $FAILED_REPORT_FILE"
      }

      // Final CSV File
      sh """
          result='''+result+'''
          echo -e "${result}" | tee -a $REPORT_CSV_FILE
      """
  }
}

//
def deployFromProps(def services, deployType, agent){
    def index = 0
    def time_wait = env.SLEEP_TIME_BETWEEN_SERVICES // wait for seconds between builds
    def SERVICESCOUNT = services.size()
    boolean PROCEED = true

    println("Deploy Type: "+ deployType + "\nServices: \n" + lines.join(',').replace(',', '\n') + '\nTotal: '+ SERVICESCOUNT )

    if (SERVICESCOUNT > 0) {
        services.each { SERVICE ->
            def artifactID = SERVICE.tokenize('=')[0]
            def version = SERVICE.tokenize('=')[1]
            def artifactVersion = artifactID+"_"+version
            result = ""
            def DEPLOYMENT_JOB = env.JOB_PATH + artifactID

            // println("ARTIFACT_ID : " + artifactID + ", ARTIFACT_VERSION : " + artifactVersion + ", VERSION : " + version)

            // Serial
            if(deployType == 'serial') {
                runJob()
                sleep time_wait.toInteger()
            }

            // Parallel
            if(deployType == 'parallel') {
                applDeployJobsArray["${index}"]= {
                    runJob()
                }
            }

        } // End Loop
    }
    return PROCEED
}

// Pipeline
pipeline{

    agent{
        label agentName
    }

    environment{
        JOB_PATH = "SPRx2.0/POC/OnShore/HARIKA/Serial_Deployment_Test/child_jobs/"
        REPORT_CSV_FILE = "${env.WORKSPACE}/report.csv"   // Report csv file
        HTML_REPORT_FILE = "${env.WORKSPACE}/report.html"  // Report html format
        FAILED_REPORT_FILE = "${env.WORKSPACE}/FAILED_REPORT.properties"  // Report html format
        EMAIL_REPORT_HEADER = "SERIAL DEPLOYMENTS COMMUNICATION" // Header in email body
        NOTIFY_SUBJECT = "Serial Deployments"   // Email Notification Subject
        //NOTIFY_TO = "Harika.Paimagam@cvshealth.com,Vishwanath.Manchala@CVSHealth.com"
        NOTIFY_TO = "Harika.Paimagam@cvshealth.com"
        SERVICESCOUNT = 0 // default do not change
        ReportSize = 0    // default do not change
        boolean NOTIFYED = false // default value if already notified
        boolean DEPLOY_RESULT_STATUS = true
    }

    stages{

        // Clean  WORKSPACE
        stage("Clean WS") {
            steps{
                step([$class: 'WsCleanup'])
            }
        }

        // Checkout GIT REPO
        stage("Checkout") {
            steps{
                checkout scm
            }
        }

        // Validate properties file
        stage("Validate PropFile") {
            steps {
              script {
                  dir(env.WORKSPACE){
                    // Get property file commit author and author and commit message
                    PROPERTIESFILE_COMMIT_AUTHOR=sh(script: 'git log -n 1 --pretty=format:"%an" -- "${serialDeplPropFile}" | awk \'{ $NF="";print}\'', returnStdout: true).trim()
                    PROPERTIESFILE_COMMIT_MESSAGE=sh(script: 'git log -n 1 -- "${serialDeplPropFile}" | tail -1', returnStdout: true).trim()
                    // No. of entries in properties file
                    def propFile = readFile file: DeplPropFile
                    def lines = propFile.readLines()
                    SERVICESCOUNT=lines.size()

                    def serialServicesList = readFile file: SerialServicesListFile
                    serialServicesList = serialServicesList.readLines()
                    serialPropFile = new File(env.WORKSPACE + '/' + SerialServicesPropFile)
                    parallelPropFile = new File(env.WORKSPACE + '/' + ParallelServicesPropFile)
                    naPropFile = new File(env.WORKSPACE + '/' + NAServicesPropFile)

                    if (SERVICESCOUNT > 0) {
                        lines.each { SERVICE ->
                            def serialServiceMatched = serialServicesList.findAll { it.contains(SERVICE.tokenize('=')[0]) }
                            if(serialServiceMatched) {
                                println('Serial Service: ' + SERVICE)
                                // list of serial deployment services
                                //serialPropFile.append(SERVICE + System.getProperty("line.separator"))
                                sh "echo $SERVICE >> $serialPropFile"
                            } else if(SERVICE.tokenize('=')[-1] == 'NA') {
                                println('Service Version NA: ' + SERVICE)
                                // list of NA Services
                                sh "echo $SERVICE >> $naPropFile"
                            } else {
                                // list of parallel deployment services
                                println('Parallel Service: ' + SERVICE)
                                //parallelPropFile.append(SERVICE + System.getProperty("line.separator"))
                                sh "echo $SERVICE >> $parallelPropFile"
                            }
                        }
                        // Service Count
                        SSCOUNT = serialPropFile.readLines().size()
                        PSCOUNT = parallelPropFile.readLines().size()
                        // NSCOUNT = naPropFile.readLines().size()
                    }
                  }
              }
            }
        }

        // Preperation
        stage("Report Prepration") {
                when {
                    expression { SERVICESCOUNT > 0 }
                }
                script {
                    dir(env.WORKSPACE) {
                        if (SERVICESCOUNT > 0) {
                            def ReportHeader = 'ServiceName, Version, JenkinsBuildConsoleOutputURL, BuildResult'
                            sh "echo $ReportHeader > $REPORT_CSV_FILE"
                        }
                    }
                }
        }

        // Deployment //

        // Serial
        stage("Serial Deployments") {
                when {
                    expression { SERVICESCOUNT > 0 && SSCOUNT > 0 }
                }

            steps {
                script {
                    dir(env.WORKSPACE) {
                        def deployType = 'serial'
                        def serial_services_list = serialPropFile.readLines()
                        def deployResult = deployFromProps(serial_services_list, deployType, agentName)

                        if (!deployResult) {
                            DEPLOY_RESULT_STATUS = false
                        }
                    }
                }
            }
        }

        // Parallel when serial has not failure
        stage("Parallel Deployments") {
                when {
                    expression { SERVICESCOUNT > 0 && PSCOUNT > 0 and DEPLOY_RESULT_STATUS}
                }

            steps {
                script {
                    dir(env.WORKSPACE) {
                        def deployType = 'parallel'
                        def parallel_services_list = parallelPropFile.readLines()
                        def deployResult = deployFromProps(parallel_services_list, deployType, agentName)

                        if (!deployResult) {
                            DEPLOY_RESULT_STATUS = false
                        }

                    }
                }
            }
        }

        // Generate HTML Repot File
        stage("Generate HTML Report File") {
            when {
                expression { SERVICESCOUNT > 0 && ReportSize > 0 }
            }
            steps{
                dir(env.WORKSPACE) {
                    script {
                        // Validate csv file
                        def reportSize = readFile file: REPORT_CSV_FILE
                        ReportSize = reportSize.readLines().size()
                        if (ReportSize > 0) {
                            sh "cat ${REPORT_CSV_FILE}"
                        } else {
                            println('Result is null no services')
                        }

                        // Generate html report file
                        sh '''
                              cat ${REPORT_CSV_FILE}
                              report_gen() {
                                  echo "<table class=\"table1\" border=\"3\" bordercolor=\"black\">"
                                  header=true
                                  while read LINE; do
                                    if $header;then
                                        echo "<tr><th>${LINE//,/</th><th>}</th></tr>"
                                        header=false
                                    else
                                        echo "<tr><td>${LINE//,/</td><td>}</td></tr>"
                                    fi
                                  done < ${REPORT_CSV_FILE}
                                  echo "</table>"
                              }
                              report_gen > ${HTML_REPORT_FILE}
                        '''
                      }
                }
            }
        }

        // Sent email Notification
        stage("Notification") {
            steps {
                script {
                      REPORT_HEADER_HTML = """
                        <html>
                          <style>
                          pre, ul, li, body {
                                        font-family: 'Calibri';
                                        font-size: 12px;
                                }
                          .par {
                                  font-family: 'Calibri';
                                  font-size: 12px;
                              }
                          .title {
                                        font-family: 'Rockwell Extra Bold';
                                        font-size: 20px;
                                        color:red;
                                        background-color: gold;
                                        text-align: center;
                                  }
                          .foot {
                                        font-family: 'Calibri';
                                        font-size: 15px;
                                        color:black;
                                        background-color: #ffad99;
                                        text-align: center;
                                 }
                          .foot1 {
                                        font-family: 'Calibri';
                                        font-size: 18px;
                                        color:black;
                                        background-color: lightblue;
                                        text-align: center;
                                 }
                      <!--  Table 1: Style  Start here -->
                          table {
                                        width: 100%;
                                        text-align: center;
                                        border-collapse: collapse;
                                 }
                              th {
                                        padding: 10px 5px;
                                        font-family: 'Calibri';
                                        border: 1px solid #fff23df;
                                 }
                              td {
                                        padding: 5px 10px;
                                        border-collapse: collapse;
                                        text-align: center;
                                        font-family: 'Calibri';
                                        font-size: 14px;
                                 }
                       tbody, td {
                                        background: #D0E4F5;
                                 }
                       thead, th {
                                        font-size: 16px;
                                        font-weight: bold;
                                        color: #AED6F1;
                                        background: #1C6EA4;
                                        background: -moz-linear-gradient(top, #5592bb 0%, #327cad 66%, #1C6EA4 100%);
                                        background: -webkit-linear-gradient(top, #5592bb 0%, #327cad 66%, #1C6EA4 100%);
                                        background: linear-gradient(to bottom, #5592bb 0%, #327cad 66%, #1C6EA4 100%);
                                 }
                         </style>
                         <body>
                     """

                      REPORT_FOOTER = """
                           </ul>
                           <br></br>
                           <p class='foot1'>[ This is an auto generated email, please do not reply. If you have any queries, please email to <a href='mailto:specialty_platform_engg@CVSHealth.com?subject=${NOTIFY_SUBJECT}'>Platform Engg</a> ]</p>
                           </body>
                           </html>
                      """

                      // Report have data
                      if(SERVICESCOUNT > 0) {
                          //sh "cat ${HTML_REPORT_FILE}"

                          REPORT_HEADER = '<h2 style="text-align:center"><font style="background-color:lightblue;color:black">' + "${EMAIL_REPORT_HEADER}" + '</font></h2>'
                          REPORT_BODY = sh(script: "cat ${HTML_REPORT_FILE}", returnStdout: true).trim()
                          REPORT_COMMIT = "Build Initiated By:&nbsp;${PROPERTIESFILE_COMMIT_AUTHOR}"
                          REPORT_COMMIT_MSG = "Comment: ${PROPERTIESFILE_COMMIT_MESSAGE}"
                      }

                      // Report is Blank i.e no services
                      else {
                        REPORT_HEADER = "<h2 align='center'>SERIAL DEPLOYMENTS COMMUNICATION</h2>"
                        REPORT_BODY="""
                                <center>
                                  <h1 style="background-color:#FFC300 ;">!! No deployments planned in this window !!</h1>
                                </center>
                        """
                        REPORT_COMMIT = ""
                        REPORT_COMMIT_MSG = ""
                      }

                      EMAIL_CONTENT = REPORT_HEADER_HTML + "<body>" +
                                      REPORT_HEADER +
                                      """
                                      <br></br>
                                      </center>
                                        <ul style="color:#3B240B">
                                      """ +
                                      REPORT_BODY + "<br>" +
                                     //REPORT_COMMIT + "<br>" +
                                     //REPORT_COMMIT_MSG + "<br>" +
                                      REPORT_FOOTER

                } // end scripts
          } // end steps
      } // end stage
    } // end stages

    post{
        success {
            script {
                   println("!! Deployment Completed !!")

                   //return final status
                   if (DEPLOY_RESULT_STATUS) {
                        NOTIFY_SUBJECT = 'Failed : ' + NOTIFY_SUBJECT
                        emailext(
                          attachmentsPattern: 'FAILED_REPORT.properties',
                          mimeType: 'text/html',
                          body: EMAIL_CONTENT,
                          subject: NOTIFY_SUBJECT,
                          to: NOTIFY_TO
                        )
                        NOTIFYED = TRUE
                        // Return failure if any service check is failed
                        error('Some Service check Failed and skipped.')
                   } else {
                        emailext mimeType: 'text/html',
                        body: EMAIL_CONTENT,
                        subject: 'Success : ' + NOTIFY_SUBJECT,
                        to: NOTIFY_TO
                        NOTIFYED = TRUE
                   }
            }
        }

        failure {
            script {
                    println("!!!!!!!!!!!!!!!!!!!!!  FAILED  FAILED  FAILED  FAILED  FAILED  FAILED !!!!!!!!!!!!!!!!!!!!!")
                    if (NOTIFYED) {
                        NOTIFY_SUBJECT = NOTIFY_SUBJECT + ": --- FAILED ---"
                        emailext mimeType: 'text/html',
                        body: 'DEPLOYMENT FAILED !!',
                        subject: NOTIFY_SUBJECT,
                        to: NOTIFY_TO
                     }
             }
         }
    }
}
// end
