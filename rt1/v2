#!/usr/bin/groovy

def agentName="any"
def webFileName="web.txt"  // mentiod list of web pages line by line

def validate_url(def lines) {
    def time_wait = env.WAIT_SEC
    def PROCEED = 'True'

    WEBCOUNT = lines.size()

    println("URLs: \n" + lines.join(',').replace(',', '\n') + '\nTotal: '+ WEBCOUNT )

    if (WEBCOUNT > 0) {
        def ReportHeader = 'Environment, URL, Status'
        sh "echo $ReportHeader > $REPORT_CSV_FILE"
        println(ReportHeader)

        lines.each { url ->
            def artifactID = line.trim()
            result = ""
            println("Environment: " + ENVIRONMENT_NAME + ", URL: " + url + ", Status: ")

            // Check URL Accessible
            sh '''
                URLCheck='''+url+'''
                EnvName='''+ENVIRONMENT_NAME+'''
                MasterCSVFile='''+masterCSVFile+'''
                StatusCode=$(curl -s -o /dev/null -w "%{http_code}" ${URLCheck})
                if [[ $StatusCode -eq 200 ]]; then
                    ServiceStatus="<font color=green><b>GOOD<\/b><\/font>"
                else
                    ServiceStatus="<font color=red><b>BAD<\/b><\/font>"
                fi
                ServiceLink="<a href=\"${URLCheck}\" target=\"_blank\">${ServiceStatus}</a>"
                ServiceStatus=$ServiceLink

                echo "$URLCheck: StatusCode - ServiceStatus"
                result="${EnvName}, ${URLCheck}, ${ServiceStatus}"
                echo $result >> $REPORT_CSV_FILE
            '''
            // sleep time_wait.toInteger()
        } // end loop
    }
    return PROCEED
}


// pipeline ...
pipeline {

    agent {
        label agentName
    }

    environment {
        WAIT_SEC = 2 // wait for seconds between builds
        ENVIRONMENT_NAME = "${env.EnvironemntName}"
        WEB_FILE_PATH =  "${env.WORKSPACE}/${ENVIRONMENT_NAME}/${webFileName}""
        REPORT_CSV_FILE = "${env.WORKSPACE}/report.csv"   // Report csv file
        HTML_REPORT_FILE = "${env.WORKSPACE}/report.html"  // Report html format
        NOTIFY_SUBJECT = "your-email-subject"    // Email Notification Subject
        NOTIFY_TO = "Harika.Paimagam@cvshealth.com"
    }

    stages {

        // Clean  WORKSPACE
        stage("Clean WS") {
            steps{
                step([$class: 'WsCleanup'])
            }
        }

        // Checkout GIT REPO
        stage("Checkout") {
            steps{
                checkout scm
            }
        }

        // Validate WebFile
        stage("Validate WebFile") {
            steps {

                // Get property file commit author and author and commit message
                PROPERTIESFILE_COMMIT_AUTHOR=sh(script: 'git log -n 1 --pretty=format:"%an" -- "${serialDeplPropFile}" | awk \'{ $NF="";print}\'', returnStdout: true).trim()
                PROPERTIESFILE_COMMIT_MESSAGE=sh(script: 'git log -n 1 -- "${serialDeplPropFile}" | tail -1', returnStdout: true).trim()

                // No. of entries in properties file
                script {
                        def webFile = readFile file: WEB_FILE_PATH
                        def lines = webFile.readLines()
                        WEBCOUNT = lines.size()
                }
            }
        }

        // Validate URL
        stage("Deployment Validate URL") {
            steps {
                when {
                    expression { WEBCOUNT > 0 }
                }
                script {
                    dir(env.WORKSPACE) {
                        res = validate_url(lines)
                        // result csv file
                        def reportSize = readFile file: REPORT_CSV_FILE
                        ReportSize = reportSize.readLines().size()
                        if (ReportSize > 0) {
                            sh "cat ${REPORT_CSV_FILE}"
                        } else {
                            println('Result is null no services')
                        }
                        // return final status
                        if (res != 'True'){
                             error('Process Failed.')
                        } else {
                            println('Completed Successfully.')
                        }
                    }
                }
            }
        }

        // Generate HTML Repot File
        stage("Generate HTML Report File") {
            when {
                expression { ReportSize > 0 }
            }

            script {
                sh """
                      report_gen() {
                          echo "<table class=\"table1\">"
                          header=true
                          while read LINE; do
                            if $header;then
                                echo "<tr><th>$LINE" | sed -e 's/:[^,]*\(,\|$\)/<\/th><th>/g'
                                header=false
                            fi
                            echo "<tr><td>${LINE//,/</td><td>}</td></tr>"
                          done < ${REPORT_CSV_FILE}
                          echo "</table>"
                      }
                      report_gen > ${HTML_REPORT_FILE}
                """
            }
        }

        stage("Notification") {
          script {
                    REPORT_HEADER_HTML = "<html>
                      <style>
                    ul, li, body {
                                    font-family: 'Calibri';
                                    font-size: 12px;
                                 }
                           .foot {
                                    font-family: 'Calibri';
                                    font-size: 18px;
                                    color:black;
                                    background-color: lightblue;
                                    text-align: center;
                                 }
                    table.table1 {
                                    width: 100%;
                                    text-align: center;
                                    border-collapse: collapse;
                                    border-spacing:0;
                                 }
                table.table1, th {
                                    font-family: 'Calibri';
                                    border: 1px solid #ffffff;
                                 }
                table.table1, td {
                                    border: none;
                                    border-collapse: collapse;
                                    text-align: center;
                                    font-family: 'Calibri';
                                    font-size: 14px;
                                 }
table.table1 td, table.table1 th {
                                    padding: 10px 5px;
                                 }
           table.table1 tbody td {
                                    background: #D0E4F5;
                                 }
              table.table1 thead {
                                    background: #1C6EA4;
                                    background: -moz-linear-gradient(top, #5592bb 0%, #327cad 66%, #1C6EA4 100%);
                                    background: -webkit-linear-gradient(top, #5592bb 0%, #327cad 66%, #1C6EA4 100%);
                                    background: linear-gradient(to bottom, #5592bb 0%, #327cad 66%, #1C6EA4 100%);
                                 }
           table.table1 thead th {
                                    font-size: 18px;
                                    font-weight: bold;
                                    color: #FFFFFF;
                                 }
                        </style>
                        <body>"

                    REPORT_FOOTER = """
                          </ul>
                          <br></br>
                          <p class='foot1'>[ This is an auto generated email, please do not reply. If you have any queries, please email to
                          <a href='mailto:specialty_platform_engg@CVSHealth.com?subject=${EmailNotificationSubject}'>Platform Engg</a> ]</p>
                          </body>
                          </html>
                        """

                    // Report have data
                    if(WEBCOUNT > 0) {
                        REPORT_HEADER = "<h2 align='center'>AUTOMATIC BUILD & DEPLOYMENTS COMMUNICATION</h2>"
                        REPORT_BODY = sh(script: "cat ${HTML_REPORT_FILE}", returnStdout: true).trim()
                        REPORT_COMMIT = "Build Initiated By:&nbsp;${PROPERTIESFILE_COMMIT_AUTHOR}"
                        REPORT_COMMIT_MSG = "${PROPERTIESFILE_COMMIT_MESSAGE}"
                    }
                    // Report is Blank i.e no services
                    else {
                      REPORT_HEADER = "<h2 align='center'>AUTOMATIC BUILD & DEPLOYMENTS COMMUNICATION</h2>"
                      REPORT_BODY="""
                              <center>
                                <h1 style="background-color:#FFC300 ;">!! No deployments planned in this window !!</h1>
                              </center>
                      """
                      REPORT_COMMIT = ""
                      REPORT_COMMIT_MSG = ""
                    }

                    EMAIL_CONTENT = REPORT_HEADER_HTML +
                                    """ <body> """ +
                                    REPORT_HEADER +
                                    """
                                    <br></br>
                                    </center>
                                      <ul style="color:#3B240B">
                                    """ +
                                    REPORT_BODY + "<br>"
                                    REPORT_COMMIT +
                                    REPORT_COMMIT_MSG +
                                    REPORT_FOOTER
        }
      }
    } // end stages
    post{

        failure {
            script{
                    println("!!!!!!!!!!!!!!!!!!!!!  FAILED  FAILED  FAILED  FAILED  FAILED  FAILED !!!!!!!!!!!!!!!!!!!!!")
                    NOTIFY_SUBJECT = NOTIFY_SUBJECT + ": --- FAILED ---"
                    emailext mimeType: 'text/html',
                    body: 'DEPLOYMENT FAILED !!',
                    subject: NOTIFY_SUBJECT,
                    to: NOTIFY_TO
            }
        }

        success {
            script{
                    println("Deployment Completed !!")
                    emailext mimeType: 'text/html',
                    body: EMAIL_CONTENT,
                    subject: NOTIFY_SUBJECT,
                    to: NOTIFY_TO
                    //to: emailSuccessList
            }
        }
    }
}

// end
