        stage("Serial Deployments") {
            when {
                expression { SERVICESCOUNT > 0 && SERIALSERVICECOUNT > 0 }
            }
            steps {
                script {
                    dir(env.WORKSPACE) {
                        def deployType = 'serial'
                        def serialPropFile = readFile file: SerialServicesPropFile // new list
                        def serial_services_list = serialPropFile.readLines() // serial service list to process

                        # make serial_services_list in same order is SerialServicesListFile
                        def serialServicesList = readFile file: SerialServicesListFile // org list
                        serialServicesList = serialServicesList.readLines()
                        def finalOrderedSerialServiceList = []
                        serialServicesList.each { SVC ->
                            println(SER)
                            def matchedEntry = serial_services_list.findAll { it.contains(SVC.tokenize('=')[0].trim()) }
                            if(matchedEntry) {
                                finalOrderedSerialServiceList.add(matchedEntry[0])
                            }
                        }
                        #

                        def deployResult = deployFromProps(finalOrderedSerialServiceList, deployType, agentName)
                        sleep time_wait.toInteger()
                        if (!deployResult ) {
                            DEPLOY_RESULT_STATUS = false
                            println('Serial job failed,so Parallel jobs will be skipped')
                        }
                    }
                }
            }
        }
