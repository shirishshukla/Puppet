#!/usr/bin/groovy

def agentName="SPRx2.0_DEPLOY-ONLY"
def serialDeplPropFile="appl-deploy.properties"

def deployFromProps(def lines){
    def time_wait = env.WAIT_SEC
    def PROCEED = 'True'

    SERVICESCOUNT=lines.size()
    println("Services: \n" + lines.join(',').replace(',', '\n') + '\nTotal: '+ SERVICESCOUNT )

    if (SERVICESCOUNT > 0) {
        def ReportHeader = 'ServiceName, Version, JenkinsBuildConsoleOutputURL, BuildResult'
        sh "echo $ReportHeader > $REPORT_CSV_FILE"
        println(ReportHeader)

        lines.each { line ->
            def artifactID = line.tokenize('=')[0]
            def version = line.tokenize('=')[1]
            def artifactVersion = artifactID+"_"+version
            result = ""
            def DEPLOYMENT_JOB="SPRx2.0/POC/OnShore/HARIKA/serial_deployments/child_jobs/" + artifactID

            println("ARTIFACT_ID : " + artifactID + ", ARTIFACT_VERSION : " + artifactVersion + ", VERSION : " + version)

            // Run job
            node {
                  dir(env.WORKSPACE + "/" + artifactVersion){
                      buildRun = ""
                      if (PROCEED == 'True') {
                          buildRun = build job: DEPLOYMENT_JOB, parameters: [
                            string(name: 'ARTIFACT_ID',value: artifactID),
                            string(name: 'ARTIFACT_VERSION',value: artifactVersion),
                            string(name: 'VERSION',value: version)
                          ], propagate: false
                          def buildResult = buildRun.getResult()

                          result =  artifactID + ', ' +  version + ', ' + buildRun.absoluteUrl + 'console' + ', ' + buildRun.result
                          println(result)

                          if (buildResult != 'SUCCESS') {
                              println("Service ${artifactID} failed with result: ${buildResult}")
                              PROCEED = 'False'
                          }
                      } else {
                          result = artifactID + ', ' +  version + ', ' + 'NA' + ', ' + 'Skipping'
                          println(result)
                      }
                }
            } // end node
            sh "echo $result >> $REPORT_CSV_FILE"
            sleep time_wait.toInteger()
        } // end loop
    }
    return PROCEED
}

pipeline{
    agent{
        label agentName
    }

    environment{
        WAIT_SEC = 2   // wait for seconds between builds
        REPORT_CSV_FILE = "${env.WORKSPACE}/report.csv"   // Report csv file
        HTML_REPORT_FILE = "${env.WORKSPACE}/report.html"  // Report html format
        EMAIL_REPORT_HEADER = "AUTOMATIC BUILD & DEPLOYMENTS COMMUNICATION" // Header in email body
        NOTIFY_SUBJECT = "your-email-subject"        // Email Notification Subject
        NOTIFY_TO = "Harika.Paimagam@cvshealth.com"  // Email notify to this email id
        SERVICESCOUNT = 0 // default do not change
        ReportSize = 0    // default do not change
    }

    stages{

        // Clean  WORKSPACE
        stage("Clean WS") {
            steps{
                step([$class: 'WsCleanup'])
            }
        }

        // Checkout GIT REPO
        stage("Checkout") {
            steps{
                checkout scm
            }
        }

        // Validate properties file
        stage("Validate PropFile") {
            steps {
                script {
                      // Get property file commit author and author and commit message
                      PROPERTIESFILE_COMMIT_AUTHOR=sh(script: 'git log -n 1 --pretty=format:"%an" -- "${serialDeplPropFile}" | awk \'{ $NF="";print}\'', returnStdout: true).trim()
                      PROPERTIESFILE_COMMIT_MESSAGE=sh(script: 'git log -n 1 -- "${serialDeplPropFile}" | tail -1', returnStdout: true).trim()
                      // No. of entries in properties file
                      def propFile = readFile file: serialDeplPropFile
                      def lines = propFile.readLines()
                      SERVICESCOUNT=lines.size()
                }
            }
        }

        // Deployment
        stage("Serial Deployments") {
            steps {
                when {
                    expression { SERVICESCOUNT > 0 }
                }
                script {
                    dir(env.WORKSPACE) {
                        res = deployFromProps(lines)
                        // result csv file
                        def reportSize = readFile file: REPORT_CSV_FILE
                        ReportSize = reportSize.readLines().size()
                        if (ReportSize > 0) {
                            sh "cat ${REPORT_CSV_FILE}"
                        } else {
                            println('Result is null no services')
                        }
                         return final status
                        if (res != 'True'){
                             error('Process Failed.')
                        } else {
                            println('Completed Successfully.')
                        }
                    }
                }
            }
        }

        // Generate HTML Repot File
        stage("Generate HTML Report File") {
            when {
                expression { WEBCOUNT > 0 && ReportSize > 0 }
            }
            steps{
                dir(env.WORKSPACE) {
                    script {
                        sh '''
                              cat ${REPORT_CSV_FILE}
                              report_gen() {
                                  echo "<table class=\"table1\">"
                                  header=true
                                  while read LINE; do
                                    if $header;then
                                        echo "<tr><th>${LINE//,/</th><th>}</th></tr>"
                                        header=false
                                    else
                                        echo "<tr><td>${LINE//,/</td><td>}</td></tr>"
                                    fi
                                  done < ${REPORT_CSV_FILE}
                                  echo "</table>"
                              }
                              report_gen > ${HTML_REPORT_FILE}
                        '''
                      }
                }
            }
        }

        // Sent email Notification
        stage("Notification") {
            steps {
                script {
                      REPORT_HEADER_HTML = """
                        <html>
                          <style>
                          pre, ul, li, body {
                                        font-family: 'Calibri';
                                        font-size: 12px;
                                }
                          .par {
                                  font-family: 'Calibri';
                                  font-size: 12px;
                              }
                          .title {
                                        font-family: 'Rockwell Extra Bold';
                                        font-size: 20px;
                                        color:red;
                                        background-color: gold;
                                        text-align: center;
                                  }
                          .foot {
                                        font-family: 'Calibri';
                                        font-size: 15px;
                                        color:black;
                                        background-color: #ffad99;
                                        text-align: center;
                                 }
                          .foot1 {
                                        font-family: 'Calibri';
                                        font-size: 18px;
                                        color:black;
                                        background-color: lightblue;
                                        text-align: center;
                                 }
                      <!--  Table 1: Style  Start here -->
                          table {
                                        width: 100%;
                                        text-align: center;
                                        border-collapse: collapse;
                                 }
                              th {
                                        padding: 10px 5px;
                                        font-family: 'Calibri';
                                        border: 1px solid #fff23df;
                                 }
                              td {
                                        padding: 5px 10px;
                                        border-collapse: collapse;
                                        text-align: center;
                                        font-family: 'Calibri';
                                        font-size: 16px;
                                 }
                       tbody, td {
                                        background: #D0E4F5;
                                 }
                       thead, th {
                                        font-size: 18px;
                                        font-weight: bold;
                                        color: #AED6F1;
                                        background: #1C6EA4;
                                        background: -moz-linear-gradient(top, #5592bb 0%, #327cad 66%, #1C6EA4 100%);
                                        background: -webkit-linear-gradient(top, #5592bb 0%, #327cad 66%, #1C6EA4 100%);
                                        background: linear-gradient(to bottom, #5592bb 0%, #327cad 66%, #1C6EA4 100%);
                                 }
                         </style>
                         <body>
                     """

                      REPORT_FOOTER = """
                           </ul>
                           <br></br>
                           <p class='foot1'>[ This is an auto generated email, please do not reply. If you have any queries, please email to
                           <a href='mailto:specialty_platform_engg@CVSHealth.com?subject=${NOTIFY_SUBJECT}'>Platform Engg</a> ]</p>
                           </body>
                           </html>
                      """

                      // Report have data
                      if(WEBCOUNT > 0) {
                          sh "cat ${HTML_REPORT_FILE}"
                          REPORT_HEADER = "<h2 align='center'>${EMAIL_REPORT_HEADER}</h2>"
                          REPORT_BODY = sh(script: "cat ${HTML_REPORT_FILE}", returnStdout: true).trim()
                          REPORT_COMMIT = "Build Initiated By:&nbsp;${PROPERTIESFILE_COMMIT_AUTHOR}"
                          REPORT_COMMIT_MSG = "Comment: ${PROPERTIESFILE_COMMIT_MESSAGE}"
                      }

                      // Report is Blank i.e no services
                      else {
                        REPORT_HEADER = "<h2 align='center'>AUTOMATIC BUILD & DEPLOYMENTS COMMUNICATION</h2>"
                        REPORT_BODY="""
                                <center>
                                  <h1 style="background-color:#FFC300 ;">!! No deployments planned in this window !!</h1>
                                </center>
                        """
                        REPORT_COMMIT = ""
                        REPORT_COMMIT_MSG = ""
                      }

                      EMAIL_CONTENT = REPORT_HEADER_HTML + "<body>" +
                                      REPORT_HEADER +
                                      """
                                      <br></br>
                                      </center>
                                        <ul style="color:#3B240B">
                                      """ +
                                      REPORT_BODY + "<br>" +
                                      REPORT_COMMIT +
                                      REPORT_COMMIT_MSG +
                                      REPORT_FOOTER
                } // end scripts
          } // end steps
      } // end stage
    } // end stages

    post{
        success {
            script {
                    println(EMAIL_CONTENT)
                    //sh "echo ${EMAIL_CONTENT}"
                    println("!! Deployment Completed !!")
                    emailext mimeType: 'text/html',
                    body: EMAIL_CONTENT,
                    subject: NOTIFY_SUBJECT,
                    to: NOTIFY_TO
                    //to: emailSuccessList
            }
        }

        failure {
            script {
                    println("!!!!!!!!!!!!!!!!!!!!!  FAILED  FAILED  FAILED  FAILED  FAILED  FAILED !!!!!!!!!!!!!!!!!!!!!")
                    NOTIFY_SUBJECT = NOTIFY_SUBJECT + ": --- FAILED ---"
                    emailext mimeType: 'text/html',
                    body: 'DEPLOYMENT FAILED !!',
                    subject: NOTIFY_SUBJECT,
                    to: NOTIFY_TO
            }
        }
    }
}

// end
